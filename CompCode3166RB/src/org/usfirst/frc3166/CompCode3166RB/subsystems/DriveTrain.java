// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3166.CompCode3166RB.subsystems;

import org.usfirst.frc3166.CompCode3166RB.RobotMap;
import org.usfirst.frc3166.CompCode3166RB.commands.*;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.RobotDrive;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.Talon;
import org.usfirst.frc3166.CompCode3166RB.OI;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.RobotDrive.MotorType;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends Subsystem {

	double deadzone = 0.2;
	double expoIncre = 1;
	double upperLimit = 0.1;
	
    private final SpeedController leftMotor = RobotMap.driveTrainLeftMotor;
    private final SpeedController rightMotor = RobotMap.driveTrainRightMotor;
    private final RobotDrive robotDrive = RobotMap.driveTrainRobotDrive;
    RobotDrive drive;
    OI oi = new OI();
    boolean flag;
    Timer time;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @Override
    public void initDefaultCommand() { 
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new TankDrive());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public void tank(double left, double right ) {
    	if (Math.abs(left) <= deadzone)
    	{left = 0.0;}
    	if (Math.abs(right) <= deadzone)
    	{right = 0.0;}
    	left=left*-1.0;
    	leftMotor.set(left);
    	rightMotor.set(right);
    	}

    public void driveF(double speed)
    {
    	double reverse=speed*-1.0;
    	tank(speed,reverse);
    }
    
    public void driveB(double speed)
    {
    	double reverse=speed*-1.0;
    	tank(reverse,speed);
    }
    
    public void turnR(double speed)
    {
    	double reverse=speed*-1.0;
    	tank(speed,speed);
    }
    public void turnL(double speed)
    {
    	double reverse=speed*-1.0;
    	tank(reverse,reverse);
    }
    public void driveF()
    {
    	tank(1.0,-1.0);
    }
    public void driveB()
    {
    	tank(-1.0,1.0);
    }
    public void turnR()
    {
    	tank(1.0,1.0);
    }
    public void turnL()
    {
    	tank(-1.0,-1.0);
    }
    public void stop()
    {
    	tank(0.0,0.0);
    }
    @Override
    public void periodic() {
        // Put code here to be run every loop

    }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

